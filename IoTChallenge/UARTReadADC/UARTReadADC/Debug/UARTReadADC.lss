
UARTReadADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000021e  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098e  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000711  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ba  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036b  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001f99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  8a:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaler to 64
  92:	1b b8       	out	0x0b, r1	; 11
  94:	10 bc       	out	0x20, r1	; 32
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	89 b9       	out	0x09, r24	; 9
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <uart_char>:
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <uart_char>
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <uart_string>:
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
  b2:	88 81       	ld	r24, Y
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <uart_string+0x18>
  b8:	21 96       	adiw	r28, 0x01	; 1
  ba:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_char>
  be:	89 91       	ld	r24, Y+
  c0:	81 11       	cpse	r24, r1
  c2:	fb cf       	rjmp	.-10     	; 0xba <uart_string+0xe>
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	81 ee       	ldi	r24, 0xE1	; 225
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <uart_string+0x1e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <uart_string+0x28>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <uart_num>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	28 2f       	mov	r18, r24
  e2:	39 e2       	ldi	r19, 0x29	; 41
  e4:	83 9f       	mul	r24, r19
  e6:	31 2d       	mov	r19, r1
  e8:	11 24       	eor	r1, r1
  ea:	32 95       	swap	r19
  ec:	3f 70       	andi	r19, 0x0F	; 15
  ee:	4c e9       	ldi	r20, 0x9C	; 156
  f0:	43 03       	mulsu	r20, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	82 0f       	add	r24, r18
  f8:	91 1d       	adc	r25, r1
  fa:	6a e0       	ldi	r22, 0x0A	; 10
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__divmodhi4>
 102:	d6 2f       	mov	r29, r22
 104:	20 5d       	subi	r18, 0xD0	; 208
 106:	c2 2f       	mov	r28, r18
 108:	34 9f       	mul	r19, r20
 10a:	c0 0d       	add	r28, r0
 10c:	11 24       	eor	r1, r1
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	83 0f       	add	r24, r19
 112:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_char>
 116:	80 e3       	ldi	r24, 0x30	; 48
 118:	8d 0f       	add	r24, r29
 11a:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_char>
 11e:	dd 0f       	add	r29, r29
 120:	8d 2f       	mov	r24, r29
 122:	88 0f       	add	r24, r24
 124:	88 0f       	add	r24, r24
 126:	d8 0f       	add	r29, r24
 128:	8c 2f       	mov	r24, r28
 12a:	8d 1b       	sub	r24, r29
 12c:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_char>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <uart_read>:
 136:	5f 9b       	sbis	0x0b, 7	; 11
 138:	fe cf       	rjmp	.-4      	; 0x136 <uart_read>
 13a:	8c b1       	in	r24, 0x0c	; 12
 13c:	08 95       	ret

0000013e <getdata>:
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 13e:	90 e6       	ldi	r25, 0x60	; 96
 140:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
 142:	97 b1       	in	r25, 0x07	; 7
 144:	89 2b       	or	r24, r25
 146:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
 148:	36 9a       	sbi	0x06, 6	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e9       	ldi	r24, 0x9F	; 159
 14c:	9f e0       	ldi	r25, 0x0F	; 15
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <getdata+0x10>
 152:	00 c0       	rjmp	.+0      	; 0x154 <getdata+0x16>
 154:	00 00       	nop
    _delay_ms(1);					//give some time delay to complete the aDC convertion
	return ADCH;
 156:	85 b1       	in	r24, 0x05	; 5
  }
 158:	08 95       	ret

0000015a <main>:
#include "UART.h"
#include "ADC.h"

int main(void)
{
	uart_init();
 15a:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaler to 64
 15e:	86 e8       	ldi	r24, 0x86	; 134
 160:	86 b9       	out	0x06, r24	; 6
	adc_init();
	unsigned char senVal;
	char option;
	while (1)
	{
		option = uart_read();
 162:	0e 94 9b 00 	call	0x136	; 0x136 <uart_read>
		if (option == 'A')
 166:	81 34       	cpi	r24, 0x41	; 65
 168:	11 f5       	brne	.+68     	; 0x1ae <main+0x54>
		{
			senVal = getdata(0); //Connect analog sensor to pin A0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 9f 00 	call	0x13e	; 0x13e <getdata>
 170:	c8 2f       	mov	r28, r24
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	81 ee       	ldi	r24, 0xE1	; 225
 176:	94 e0       	ldi	r25, 0x04	; 4
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x1e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x28>
 182:	00 00       	nop
			_delay_ms(100);
			uart_string("Sensor Value is: ");
 184:	80 e6       	ldi	r24, 0x60	; 96
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
			uart_num(senVal);
 18c:	8c 2f       	mov	r24, r28
 18e:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_num>
			uart_string("\n");
 192:	82 e7       	ldi	r24, 0x72	; 114
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	83 ed       	ldi	r24, 0xD3	; 211
 19e:	90 e3       	ldi	r25, 0x30	; 48
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x46>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x50>
 1aa:	00 00       	nop
 1ac:	da cf       	rjmp	.-76     	; 0x162 <main+0x8>
			_delay_ms(1000);
		}
		else{
			uart_string("Invalid Option!!!");
 1ae:	84 e7       	ldi	r24, 0x74	; 116
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	83 ed       	ldi	r24, 0xD3	; 211
 1ba:	90 e3       	ldi	r25, 0x30	; 48
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x62>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x6c>
 1c6:	00 00       	nop
 1c8:	cc cf       	rjmp	.-104    	; 0x162 <main+0x8>

000001ca <__divmodhi4>:
 1ca:	97 fb       	bst	r25, 7
 1cc:	07 2e       	mov	r0, r23
 1ce:	16 f4       	brtc	.+4      	; 0x1d4 <__divmodhi4+0xa>
 1d0:	00 94       	com	r0
 1d2:	07 d0       	rcall	.+14     	; 0x1e2 <__divmodhi4_neg1>
 1d4:	77 fd       	sbrc	r23, 7
 1d6:	09 d0       	rcall	.+18     	; 0x1ea <__divmodhi4_neg2>
 1d8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__udivmodhi4>
 1dc:	07 fc       	sbrc	r0, 7
 1de:	05 d0       	rcall	.+10     	; 0x1ea <__divmodhi4_neg2>
 1e0:	3e f4       	brtc	.+14     	; 0x1f0 <__divmodhi4_exit>

000001e2 <__divmodhi4_neg1>:
 1e2:	90 95       	com	r25
 1e4:	81 95       	neg	r24
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	08 95       	ret

000001ea <__divmodhi4_neg2>:
 1ea:	70 95       	com	r23
 1ec:	61 95       	neg	r22
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255

000001f0 <__divmodhi4_exit>:
 1f0:	08 95       	ret

000001f2 <__udivmodhi4>:
 1f2:	aa 1b       	sub	r26, r26
 1f4:	bb 1b       	sub	r27, r27
 1f6:	51 e1       	ldi	r21, 0x11	; 17
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <__udivmodhi4_ep>

000001fa <__udivmodhi4_loop>:
 1fa:	aa 1f       	adc	r26, r26
 1fc:	bb 1f       	adc	r27, r27
 1fe:	a6 17       	cp	r26, r22
 200:	b7 07       	cpc	r27, r23
 202:	10 f0       	brcs	.+4      	; 0x208 <__udivmodhi4_ep>
 204:	a6 1b       	sub	r26, r22
 206:	b7 0b       	sbc	r27, r23

00000208 <__udivmodhi4_ep>:
 208:	88 1f       	adc	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	5a 95       	dec	r21
 20e:	a9 f7       	brne	.-22     	; 0x1fa <__udivmodhi4_loop>
 210:	80 95       	com	r24
 212:	90 95       	com	r25
 214:	bc 01       	movw	r22, r24
 216:	cd 01       	movw	r24, r26
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
