
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094e  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000757  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037a  00000000  00000000  0000139d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019f  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  7a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uartInit>:

unsigned int getCh(){									// Receiving a Character
	while ((UCSRA & (1 << RXC)) == 0){					// Wait While Receiving Completes
	}
	return UDR;											// Character Received
}
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	88 61       	ori	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	89 b9       	out	0x09, r24	; 9
  92:	08 95       	ret

00000094 <putCh>:
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <putCh>
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	08 95       	ret

0000009c <putStr>:

void putStr(char*send){									// String Send
  9c:	fc 01       	movw	r30, r24
	int i=0;
	while(send[i]!='\0'){								// Initialize String
  9e:	90 81       	ld	r25, Z
  a0:	99 23       	and	r25, r25
  a2:	39 f0       	breq	.+14     	; 0xb2 <putStr+0x16>
  a4:	31 96       	adiw	r30, 0x01	; 1
		while(!(UCSRA & (1<<UDRE)));					// Wait While Sending
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <putStr+0xa>
		UDR=send[i];
  aa:	9c b9       	out	0x0c, r25	; 12
	return UDR;											// Character Received
}

void putStr(char*send){									// String Send
	int i=0;
	while(send[i]!='\0'){								// Initialize String
  ac:	91 91       	ld	r25, Z+
  ae:	91 11       	cpse	r25, r1
  b0:	fa cf       	rjmp	.-12     	; 0xa6 <putStr+0xa>
  b2:	08 95       	ret

000000b4 <adcInit>:
		i++;
	};
}

void adcInit(void){        								// Initialization of ADC
	ADMUX=(1<<REFS0);									//AREF 0
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1); 			//Enable ADC
  b8:	86 e8       	ldi	r24, 0x86	; 134
  ba:	86 b9       	out	0x06, r24	; 6
  bc:	08 95       	ret

000000be <adcRead>:
}

unsigned int adcRead(unsigned char adc_input){			// ADC Read
	ADMUX=adc_input|ref;								// Select ADC Pin
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	80 e3       	ldi	r24, 0x30	; 48
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <adcRead+0x6>
	_delay_us(9);										// Delay needed for the stabilization of the ADC input voltage
	ADCSRA|=0x48;										// Start the AD conversion
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	88 64       	ori	r24, 0x48	; 72
  cc:	86 b9       	out	0x06, r24	; 6
	while ((ADCSRA & 0x10)==0);							// Wait for the AD conversion to complete
  ce:	34 9b       	sbis	0x06, 4	; 6
  d0:	fe cf       	rjmp	.-4      	; 0xce <adcRead+0x10>
	return ADCW;
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	95 b1       	in	r25, 0x05	; 5
  d6:	08 95       	ret

000000d8 <main>:
#include <util/delay.h>
#include <stdlib.h>
#include "IoT.h"

int main(void)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <main+0x6>
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x8>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	uartInit();
  e6:	0e 94 41 00 	call	0x82	; 0x82 <uartInit>
	adcInit();
  ea:	0e 94 5a 00 	call	0xb4	; 0xb4 <adcInit>
	int senVal;
	char charVal[5];
	while (1)
	{
		senVal = adcRead(0);	//Connect Analog Sensor to Pin A0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 5f 00 	call	0xbe	; 0xbe <adcRead>
  f4:	8c 01       	movw	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	83 ed       	ldi	r24, 0xD3	; 211
  fa:	90 e3       	ldi	r25, 0x30	; 48
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x24>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x2e>
 106:	00 00       	nop
		_delay_ms(1000);
		putCh('\n');
 108:	8a e0       	ldi	r24, 0x0A	; 10
 10a:	0e 94 4a 00 	call	0x94	; 0x94 <putCh>
		putStr("Sensor Value is:");
 10e:	80 e6       	ldi	r24, 0x60	; 96
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 4e 00 	call	0x9c	; 0x9c <putStr>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ed       	ldi	r24, 0xD3	; 211
 11a:	90 e3       	ldi	r25, 0x30	; 48
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x44>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x4e>
 126:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 128:	4a e0       	ldi	r20, 0x0A	; 10
 12a:	be 01       	movw	r22, r28
 12c:	6f 5f       	subi	r22, 0xFF	; 255
 12e:	7f 4f       	sbci	r23, 0xFF	; 255
 130:	c8 01       	movw	r24, r16
 132:	0e 94 a0 00 	call	0x140	; 0x140 <__itoa_ncheck>
		_delay_ms(1000);
		itoa(senVal, charVal, 10); //Convert integer to String
		putStr("senVal");
 136:	81 e7       	ldi	r24, 0x71	; 113
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 4e 00 	call	0x9c	; 0x9c <putStr>
 13e:	d7 cf       	rjmp	.-82     	; 0xee <main+0x16>

00000140 <__itoa_ncheck>:
 140:	bb 27       	eor	r27, r27
 142:	4a 30       	cpi	r20, 0x0A	; 10
 144:	31 f4       	brne	.+12     	; 0x152 <__itoa_ncheck+0x12>
 146:	99 23       	and	r25, r25
 148:	22 f4       	brpl	.+8      	; 0x152 <__itoa_ncheck+0x12>
 14a:	bd e2       	ldi	r27, 0x2D	; 45
 14c:	90 95       	com	r25
 14e:	81 95       	neg	r24
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	0c 94 ac 00 	jmp	0x158	; 0x158 <__utoa_common>

00000156 <__utoa_ncheck>:
 156:	bb 27       	eor	r27, r27

00000158 <__utoa_common>:
 158:	fb 01       	movw	r30, r22
 15a:	55 27       	eor	r21, r21
 15c:	aa 27       	eor	r26, r26
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	aa 1f       	adc	r26, r26
 164:	a4 17       	cp	r26, r20
 166:	10 f0       	brcs	.+4      	; 0x16c <__utoa_common+0x14>
 168:	a4 1b       	sub	r26, r20
 16a:	83 95       	inc	r24
 16c:	50 51       	subi	r21, 0x10	; 16
 16e:	b9 f7       	brne	.-18     	; 0x15e <__utoa_common+0x6>
 170:	a0 5d       	subi	r26, 0xD0	; 208
 172:	aa 33       	cpi	r26, 0x3A	; 58
 174:	08 f0       	brcs	.+2      	; 0x178 <__utoa_common+0x20>
 176:	a9 5d       	subi	r26, 0xD9	; 217
 178:	a1 93       	st	Z+, r26
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	79 f7       	brne	.-34     	; 0x15c <__utoa_common+0x4>
 17e:	b1 11       	cpse	r27, r1
 180:	b1 93       	st	Z+, r27
 182:	11 92       	st	Z+, r1
 184:	cb 01       	movw	r24, r22
 186:	0c 94 c5 00 	jmp	0x18a	; 0x18a <strrev>

0000018a <strrev>:
 18a:	dc 01       	movw	r26, r24
 18c:	fc 01       	movw	r30, r24
 18e:	67 2f       	mov	r22, r23
 190:	71 91       	ld	r23, Z+
 192:	77 23       	and	r23, r23
 194:	e1 f7       	brne	.-8      	; 0x18e <strrev+0x4>
 196:	32 97       	sbiw	r30, 0x02	; 2
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <strrev+0x18>
 19a:	7c 91       	ld	r23, X
 19c:	6d 93       	st	X+, r22
 19e:	70 83       	st	Z, r23
 1a0:	62 91       	ld	r22, -Z
 1a2:	ae 17       	cp	r26, r30
 1a4:	bf 07       	cpc	r27, r31
 1a6:	c8 f3       	brcs	.-14     	; 0x19a <strrev+0x10>
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
