
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000000fe  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000835  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b3  00000000  00000000  00000a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035b  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  7a:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uartInit>:
	ADMUX=adc_input|ref;								// Select ADC Pin
	_delay_us(9);										// Delay needed for the stabilization of the ADC input voltage
	ADCSRA|=0x48;										// Start the AD conversion
	while ((ADCSRA & 0x10)==0);							// Wait for the AD conversion to complete
	return ADCW;
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	88 61       	ori	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	89 b9       	out	0x09, r24	; 9
  92:	08 95       	ret

00000094 <putCh>:
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <putCh>
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	08 95       	ret

0000009c <putStr>:
  9c:	fc 01       	movw	r30, r24
  9e:	90 81       	ld	r25, Z
  a0:	99 23       	and	r25, r25
  a2:	39 f0       	breq	.+14     	; 0xb2 <putStr+0x16>
  a4:	31 96       	adiw	r30, 0x01	; 1
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <putStr+0xa>
  aa:	9c b9       	out	0x0c, r25	; 12
  ac:	91 91       	ld	r25, Z+
  ae:	91 11       	cpse	r25, r1
  b0:	fa cf       	rjmp	.-12     	; 0xa6 <putStr+0xa>
  b2:	08 95       	ret

000000b4 <main>:
#include <util/delay.h>
#include "IoT.h"

int main(void)
{
    uartInit();
  b4:	0e 94 41 00 	call	0x82	; 0x82 <uartInit>
    while (1) 
    {
		putCh('Z');
  b8:	8a e5       	ldi	r24, 0x5A	; 90
  ba:	0e 94 4a 00 	call	0x94	; 0x94 <putCh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	83 ed       	ldi	r24, 0xD3	; 211
  c2:	90 e3       	ldi	r25, 0x30	; 48
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x10>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x1a>
  ce:	00 00       	nop
		_delay_ms(1000);
		putCh('\n');
  d0:	8a e0       	ldi	r24, 0x0A	; 10
  d2:	0e 94 4a 00 	call	0x94	; 0x94 <putCh>
		putStr("Hello from UART");
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 4e 00 	call	0x9c	; 0x9c <putStr>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	83 ed       	ldi	r24, 0xD3	; 211
  e2:	90 e3       	ldi	r25, 0x30	; 48
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x30>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x3a>
  ee:	00 00       	nop
		_delay_ms(1000);
		putStr("\r");
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 4e 00 	call	0x9c	; 0x9c <putStr>
  f8:	df cf       	rjmp	.-66     	; 0xb8 <main+0x4>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
